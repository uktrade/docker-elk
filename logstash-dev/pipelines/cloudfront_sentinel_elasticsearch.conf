input {
  beats {
    host => "${LOGSTASH_BEATS_HOST}"
    port => "${LOGSTASH_BEATS_PORT}"
  }
}


filter {

  # Remove any initial Beats / Codec tags.
  mutate {
    remove_field => [ "tags" ]
  }

  # Set message_prefix to determine if the CloudWatch log includes a version and header.
  ruby {
    code => "event.set('message_prefix', event.get('message')[0,4])"
  }
  
  if ( [message_prefix] == '#Ver' ) {
    # Grok filter to convert multi-line CloudFront log from Beats into S3-type log format: cloudfront_version, cloudfront_fields and cloudfront_values
    grok {
      match => { "message" => "#Version: %{DATA:cloudfront_version}\n%{DATA:cloudfront_fields}\n%{GREEDYDATA:cloudfront_values}" }
    }
  } else {
    mutate {
      copy => { "message" => "cloudfront_values" }
    }
  }

  # Grok filter to split the CloudFront log format, which is:
  # Fields: date time x-edge-location sc-bytes c-ip cs-method cs(Host) cs-uri-stem sc-status cs(Referer) cs(User-Agent) cs-uri-query cs(Cookie) x-edge-result-type x-edge-request-id x-host-header cs-protocol cs-bytes time-taken x-forwarded-for ssl-protocol ssl-cipher x-edge-response-result-type cs-protocol-version fle-status fle-encrypted-fields c-port time-to-first-byte x-edge-detailed-result-type sc-content-type sc-content-len sc-range-start sc-range-end"
  # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#LogFileFormat
  grok {
    match => { "cloudfront_values" => "%{DATE_EU:date}\t%{TIME:time}\t%{DATA:x_edge_location}\t%{NONNEGINT:sc_bytes}\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NONNEGINT:sc_status}\t%{DATA:cs_referrer}\t%{DATA:cs_user_agent}\t%{DATA:cs_uri_query}\t%{DATA:cs_cookie}\t%{WORD:x_edge_result_type}\t%{DATA:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{URIPROTO:cs_protocol}\t%{NONNEGINT:cs_bytes}\t%{BASE10NUM:time_taken}\t%{DATA:x_forwarded_for}\t%{DATA:ssl_protocol}\t%{DATA:ssl_cipher}\t%{DATA:x_edge_response_result_type}\t%{DATA:cs_protocol_version}\t%{DATA:fle_status}\t%{DATA:fle_encrypted_fields}\t%{NONNEGINT:c-port}\t%{BASE10NUM:time_to_first_byte}\t%{DATA:x_edge_detailed_result_type}\t%{DATA:sc_content_type}\t%{DATA:sc_content_len}\t%{DATA:sc_range_start}\t%{GREEDYDATA:sc_range_end}" }
  }

  # Create clones for OpenSearch, Sentinel and SQS outputs.
  clone {
    clones => ['cloudwatch_to_opensearch', 'cloudwatch_to_sentinel', 'logstash_to_sqs' ]
  }

  if ( ([type] == 'cloudwatch_to_sentinel') or ([type] == 'cloudwatch_to_opensearch') or ([type] == 'logstash_to_sqs') ) {
    # Remove fields added by Beats inputs that aren't required in any clones.
    mutate {
      remove_field => [ "log", "host", "cloud", "input", "agent", "ecs" ]
    }
  }

  if ( ([type] == 'cloudwatch_to_opensearch') or ([type] == 'cloudwatch_to_sentinel') ) {
    # Remove fields added by Beats inputs that aren't required for Opensearch or Sentinel.
    mutate {
      remove_field => "message"
    }
  }

  if ( ( [type] == 'cloudwatch_to_opensearch') or ([type] == 'logstash_to_sqs') ) {
    # Remove fields added by filters that aren't required for Opensearch or SQS.
    mutate {
      remove_field => [ "cloudfront_values", "cloudfront_fields", "cloudfront_version" ]
    }
  }

  if ([type] == 'logstash_to_sqs') {
    
    # Only output to SQS once per file (so drop if this message doesn't include a file header).
    if ( [message_prefix] != '#Ver' ) {
      drop { }
    }

    # Remove fields added by filters that aren't required for SQS.# Remove fields added by filters that aren't required for SQS.
    mutate {
      remove_field => [ "x_forwarded_for", "date", "cs_referrer", "time_to_first_byte", "x_edge_request_id", "cs_cookie", "x_edge_response_result_type", "ssl_cipher", "sc_content_type", "x_edge_location", "cs_uri_stem", "sc_content_len", "cs_host", "cs_protocol_version", "cs_user_agent", "sc_range_end", "cs_method", "sc_bytes", "fle_status", "x_edge_result_type", "cs_bytes", "ssl_protocol", "time", "cs_protocol", "x_edge_detailed_result_type", "fle_encrypted_fields", "sc_range_start", "x_host_header", "c_ip", "c-port", "cs_uri_query", "time_taken", "sc_status" ]
    }

  }

}

output {

  # Standard out for debugging in CloudWatch
  stdout {}

  if [type] == 'cloudwatch_to_opensearch' {
    # Opensearch output
    opensearch {
      ssl => true
      ssl_certificate_verification => true
      manage_template => false
      ecs_compatibility => disabled
      user => "${ODFE_ELASTICSEARCH_USERNAME}"
      password => "${ODFE_ELASTICSEARCH_PASSWORD}"
      hosts => "${ODFE_ELASTICSEARCH_URL}"
      index => "${AWS_CLOUDFRONT_ELASTICSEARCH_INDEX}"
    }
  }

  if [type] == 'cloudwatch_to_sentinel' {
    # Sentinel Output
    microsoft-logstash-output-azure-loganalytics {
      workspace_id => "${SENTINEL_WORKSPACE_ID}"
      workspace_key => "${SENTINEL_WORKSPACE_KEY}"
      custom_log_table_name => "${SENTINEL_WORKSPACE_TABLENAME_CLOUDFRONT}"
    }
  }

  if [type] == 'logstash_to_sqs' {
    # SQS output for S3 buclet pruning
    sqs {
      queue => "${SQS_OUTPUT_QUEUE}"
      region => "${region}"
    }
  }

}
