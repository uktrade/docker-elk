input {
  beats {
    host => "${LOGSTASH_BEATS_HOST}"
    port => "${LOGSTASH_BEATS_PORT}"
  }
}


filter {

  clone {
    clones => ['clone_for_opensearch', 'clone_for_sentinel', 'clone_for_sqs']
  }

  if ( ([type] == 'clone_for_sentinel') or ([type] == 'clone_for_opensearch') or ([type] == 'clone_for_sqs') ) {

    # Remove fields added by Beats inputs that aren't required in any clones.
    mutate {
      remove_field => [ "log", "host", "cloud", "input", "agent", "tags", "ecs" ]
    }
    # Remaining fields are: "type", "message" and "aws"

  }

  if ( ([type] == 'clone_for_sentinel') or ([type] == 'clone_for_opensearch') ) {

    # Grok filter to convert multi-line CloudFront log from Beats into S3-type log format.
    grok {
      match => { "message" => "#Version: %{DATA:cloudfront_version}\n%{DATA:cloudfront_fields}\n%{GREEDYDATA:cloudfront_values}" }
    }
    
    # Grok filter to split the CloudFront log format, which is:
    # Fields: date time x-edge-location sc-bytes c-ip cs-method cs(Host) cs-uri-stem sc-status cs(Referer) cs(User-Agent) cs-uri-query cs(Cookie) x-edge-result-type x-edge-request-id x-host-header cs-protocol cs-bytes time-taken x-forwarded-for ssl-protocol ssl-cipher x-edge-response-result-type cs-protocol-version fle-status fle-encrypted-fields c-port time-to-first-byte x-edge-detailed-result-type sc-content-type sc-content-len sc-range-start sc-range-end"
    # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#LogFileFormat
    grok {
      match => { "cloudfront_values" => "%{DATE_EU:date}\t%{TIME:time}\t%{DATA:x_edge_location}\t%{NONNEGINT:sc_bytes}\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NONNEGINT:sc_status}\t%{DATA:cs_referrer}\t%{DATA:cs_user_agent}\t%{DATA:cs_uri_query}\t%{DATA:cs_cookie}\t%{WORD:x_edge_result_type}\t%{DATA:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{URIPROTO:cs_protocol}\t%{NONNEGINT:cs_bytes}\t%{BASE10NUM:time_taken}\t%{DATA:x_forwarded_for}\t%{DATA:ssl_protocol}\t%{DATA:ssl_cipher}\t%{DATA:x_edge_response_result_type}\t%{DATA:cs_protocol_version}\t%{DATA:fle_status}\t%{DATA:fle_encrypted_fields}\t%{NONNEGINT:c-port}\t%{BASE10NUM:time_to_first_byte}\t%{DATA:x_edge_detailed_result_type}\t%{DATA:sc_content_type}\t%{NONNEGINT:sc_content_len}\t%{DATA:sc_range_start}\t%{GREEDYDATA:sc_range_end}" }
    }
    
    # Replace the "message" field (containing version and field names) with the tab-separated values only.
    mutate {
      remove_field => [ "message" ]
    }
    mutate {
      rename => {
        "cloudfront_values" => "message"
      }
    }

  }

  if [type] == 'clone_for_opensearch' {
    # Remove the "cloudFront_fields" field - only required for Sentinel.
    mutate {
      remove_field => [ "cloudfront_fields" ]
    }
  }

  if [type] == 'clone_for_sentinel' {
    # Remove the "aws" field - required for Opensearch and SQS.
    mutate {
      remove_field => [ "aws" ]
    }
  }

  if [type] == 'clone_for_sqs' {
    # Remove the "message" and "version" field - only "aws" field used for buclet pruning.
    mutate {
      remove_field => [ "message", "version" ]
    }
  }

}


output {

  # Standard out for debugging in CloudWatch
  stdout {}

  if [type] == 'clone_for_opensearch' {
    # Opensearch output
    opensearch {
      ssl => true
      ssl_certificate_verification => true
      manage_template => false
      ecs_compatibility => disabled
      user => "${ODFE_ELASTICSEARCH_USERNAME}"
      password => "${ODFE_ELASTICSEARCH_PASSWORD}"
      hosts => "${ODFE_ELASTICSEARCH_URL}"
      index => "${AWS_CLOUDFRONT_ELASTICSEARCH_INDEX}"
    }
  }

  if [type] == 'clone_for_sentinel' {
    # Sentinel Output
    microsoft-logstash-output-azure-loganalytics {
      workspace_id => "${SENTINEL_WORKSPACE_ID}"
      workspace_key => "${SENTINEL_WORKSPACE_KEY}"
      custom_log_table_name => "${SENTINEL_WORKSPACE_TABLENAME_CLOUDFRONT}"
    }
  }

  if [type] == 'clone_for_sqs' {
    # SQS output for S3 buclet pruning
    sqs {
      queue => "${SQS_OUTPUT_QUEUE}"
      region => "${region}"
    }
  }

}
