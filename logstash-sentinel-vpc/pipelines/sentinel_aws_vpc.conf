input {
  beats {
    port => 5044
  }
}

filter {

  # Drop the header row
  if [message] =~ "version" {
    drop { }
  }

  # Grok filter to split the VPC Flow Log message in ${VPC_FLOWLOG_FORMAT} (env var) format.
  grok {
    match => { "message" => "${VPC_FLOWLOG_FORMAT}" }
  }

  # Removed Logstash and Filebeat fields, not required
  mutate {
    remove_field => [ "ecs", "host", "input", "aws", "log", "agent", "cloud", "@version" ]    
  }

  # Set source address type to "private" for non-routable IP ranges, otherwise public.
  if ( [pkt-srcaddr] =~ /(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)/ ) {
    mutate {
      add_field => { "pkt-srcaddr-type" => "private" }
    }
  }
  else {
    mutate {
      add_field => { "pkt-srcaddr-type" => "public" }
    }
  }

  # Set destination address type to "private" for non-routable IP ranges, otherwise public.
  if ( [pkt-dstaddr] =~ /(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)/ ) {
    mutate {
      add_field => { "pkt-dstaddr-type" => "private" }
    }
  }
  else {
    mutate {
      add_field => { "pkt-dstaddr-type" => "public" }
    }
  }

  # Add "investigation" field when source and destination addresses are private.
  if ( ( [pkt-srcaddr-type] == 'private' ) and ( [pkt-dstaddr-type] == 'private' )  ) {
    mutate {
      add_field => { "data_tier" => "Basic" }
    }
  }
  else {
    mutate {
      add_field => { "data_tier" => "Analytics" }
    }
  }

}

output {

  # Standard out for debugging in CloudWatch.
  stdout {}

  # Sentinel Output where "data_tier" field exists.
  if ( [data_tier] == 'Basic' ) {
    microsoft-sentinel-logstash-output-plugin {
      client_app_Id => "${SENTINEL_CLIENT_APP_ID}"
      client_app_secret => "${SENTINEL_CLIENT_APP_SECRET}"
      tenant_id => "${SENTINEL_TENANT_ID}"
      data_collection_endpoint => "${SENTINEL_DATA_COLLECTION_ENDPOINT}"
      dcr_immutable_id => "${SENTINEL_DCR_IMMUTABLE_ID_BASIC}"
      dcr_stream_name => "${SENTINEL_DCR_STREAM_NAME_BASIC}"
      create_sample_file=> false
    }
  }
  if ( [data_tier] == 'Analytics' ) {
    microsoft-sentinel-logstash-output-plugin {
      client_app_Id => "${SENTINEL_CLIENT_APP_ID}"
      client_app_secret => "${SENTINEL_CLIENT_APP_SECRET}"
      tenant_id => "${SENTINEL_TENANT_ID}"
      data_collection_endpoint => "${SENTINEL_DATA_COLLECTION_ENDPOINT}"
      dcr_immutable_id => "${SENTINEL_DCR_IMMUTABLE_ID_ANALYTICS}"
      dcr_stream_name => "${SENTINEL_DCR_STREAM_NAME_ANALYTICS}"
      create_sample_file=> false
    }
  }

  # SQS output for S3 bucket pruning.
  if ( [type] == 'sqs' ) {
    sqs {
      queue => "${SQS_OUTPUT_QUEUE}"
      region => "${region}"
    }
  }

}
